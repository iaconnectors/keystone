# synthetica/core/compiler.py

from synthetica.core.models import AbstractCreativeObject, IntermediateTechnicalIntent
from synthetica.core.knowledge_broker import KnowledgeBroker
from synthetica.engines.operators import CognitiveOperators
from typing import List

class NexusCompiler:
    """
    Fase 1 da Mente H√≠brida: Racioc√≠nio Abstrato.
    Traduz a inten√ß√£o (ACO) num plano abstrato (ITI).
    """
    def __init__(self, broker: KnowledgeBroker):
        # Usa o Broker de Racioc√≠nio (Nexus KB)
        self.broker = broker
        self.cognitive_ops = CognitiveOperators(broker)
        print("üé®: NexusCompiler (Fase 1: Racioc√≠nio) inicializado.")

    def compile_to_iti(self, aco: AbstractCreativeObject, cognitive_pipeline: List[str] = []) -> IntermediateTechnicalIntent:
        """
        Processo de compila√ß√£o da Fase 1. Gera o ITI.
        """
        print(f"üß†: Fase 1 (Racioc√≠nio Abstrato): Iniciando compila√ß√£o do ACO...")
        iti = IntermediateTechnicalIntent(source_aco_id=aco.aco_id)

        # Etapa 1.1: Pipeline Cognitivo
        if cognitive_pipeline:
            iti.reasoning_chain.append("In√≠cio do Pipeline Cognitivo")
            for op_name in cognitive_pipeline:
                # Os operadores modificam o ACO e adicionam diretivas ao ITI
                self.cognitive_ops.apply(op_name, aco, iti)

        # Etapa 1.2: Tradu√ß√£o da Inten√ß√£o e Elementos
        self._translate_intent(aco, iti)

        # Etapa 1.3: Gera√ß√£o de Queries T√©cnicas (Infer√™ncia)
        self._define_technical_queries(aco, iti)

        print("‚úÖ: Fase 1 conclu√≠da. ITI gerado.")
        return iti

    def _translate_intent(self, aco: AbstractCreativeObject, iti: IntermediateTechnicalIntent):
        if aco.intent.narrative_moment:
            iti.core_concept = aco.intent.narrative_moment

        if aco.intent.compositional_flow:
            flow = aco.intent.compositional_flow
            iti.composition = f"Path: {flow.path}"

    def _define_technical_queries(self, aco: AbstractCreativeObject, iti: IntermediateTechnicalIntent):
        # Infer√™ncia de Queries T√©cnicas (Pilar I.2)
        if "architecture" in iti.core_concept.lower() or "building" in iti.core_concept.lower():
             iti.abstract_directives.camera_query = "High-Res Architectural Camera"
             iti.abstract_directives.lens_query = "Tilt-Shift Lens"
             iti.reasoning_chain.append("Infer√™ncia: Contexto Arquitet√¥nico detectado. Definidas queries t√©cnicas.")
        
        # Processos Hist√≥ricos
        if aco.constraints.style_constraints and aco.constraints.style_constraints.historical_process:
            process = aco.constraints.style_constraints.historical_process
            iti.abstract_directives.historical_process = process
            iti.reasoning_chain.append(f"Diretiva de Processo Hist√≥rico adicionada: {process}")